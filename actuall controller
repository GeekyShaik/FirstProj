@Service
public class TemplateProfileService {
    @Autowired
    private OmMessageTemplateRepository templateRepository;

    public List<TemplateProfileDto> getTemplatesByNameAndVersion(String templateName, String templateVersion) {
        return templateRepository.findByTemplateNameAndVersion(templateName, templateVersion);
    }
}
===============

@RestController
@RequestMapping("/templates")
public class TemplateProfileController {
    @Autowired
    private TemplateProfileService templateService;

    @GetMapping("/find")
    public ResponseEntity<List<TemplateProfileDto>> getTemplatesByNameAndVersion(
            @RequestParam String templateName,
            @RequestParam String templateVersion
    ) {
        List<TemplateProfileDto> templates = templateService.getTemplatesByNameAndVersion(templateName, templateVersion);

        if (templates.isEmpty()) {
            return ResponseEntity.notFound().build();
        } else {
            return ResponseEntity.ok(templates);
        }
    }
}

==============================================================================================

public TemplateProfileDTO retrieveTemplateWebClientCall(String basePath, String pathLabels, String objectName, BigDecimal objectVersion) throws Exception {

        return metadataWebServiceClient.get()
                .uri(
                        UriComponentsBuilder.fromUriString(
                                basePath + pathLabels)
                                .build(objectName, objectVersion))
                .header(apiKeyLabel, API_KEY)
                .accept(MediaType.APPLICATION_JSON)
                .retrieve()
                .onStatus(HttpStatusCode::is4xxClientError, clientResponse ->
                        Mono.error(new Throwable()))
                .onStatus(HttpStatusCode::is5xxServerError, clientResponse ->
                        Mono.error(new Throwable()))
                .bodyToMono(TemplateProfileDTO.class)
                .block();
    }

