Sure, let's create some more specific test cases for both the `TemplateProfileService` and `ObjectProfileController`.

### For `TemplateProfileService`

```java
// ...

public class TemplateProfileServiceTest {

    // ... [Previous setup code]

    @Test
    public void whenValidNameAndVersion_thenTemplateShouldBeFound() {
        // Setup
        String templateName = "ValidName";
        Integer templateVersion = 1;
        // Define behavior of mocked repository
        // Assume this method returns a non-empty list when valid template name and version is passed
        when(mockTemplateRepository.findOmMsgTemplateEntityByOmMsgTemplateEntityPK_TemplateNameAndOmMsgTemplateEntityPK_TemplateVersion(templateName, templateVersion)).thenReturn(new OmMsgTemplateEntity());
        when(mockChannelRepository.searchAllByTemplateNameAndTemplateVersion(templateName, templateVersion)).thenReturn(new ArrayList<>());

        // Execute
        List<TemplateProfileDto> result = serviceUnderTest.getTemplatesByNameAndVersion(templateName, templateVersion);

        // Assert
        assertNotNull(result);
        assertFalse(result.isEmpty());
    }

    @Test
    public void whenInvalidNameAndVersion_thenNoTemplateShouldBeFound() {
        // Setup
        String templateName = "InvalidName";
        Integer templateVersion = 99;
        // Define behavior of mocked repository
        when(mockTemplateRepository.findOmMsgTemplateEntityByOmMsgTemplateEntityPK_TemplateNameAndOmMsgTemplateEntityPK_TemplateVersion(templateName, templateVersion)).thenReturn(null);

        // Execute
        List<TemplateProfileDto> result = serviceUnderTest.getTemplatesByNameAndVersion(templateName, templateVersion);

        // Assert
        assertNotNull(result);
        assertTrue(result.isEmpty());
    }

    @Test(expected = Exception.class)
    public void whenRepositoryThrowsException_thenShouldPropagate() {
        // Setup
        String templateName = "ValidName";
        Integer templateVersion = 1;
        // Define behavior to throw exception
        when(mockTemplateRepository.findOmMsgTemplateEntityByOmMsgTemplateEntityPK_TemplateNameAndOmMsgTemplateEntityPK_TemplateVersion(anyString(), anyInt())).thenThrow(new RuntimeException());

        // Execute
        serviceUnderTest.getTemplatesByNameAndVersion(templateName, templateVersion);
    }

    // Additional test cases...
}
```

### For `ObjectProfileController`

```java
// ...

@RunWith(SpringRunner.class)
@WebMvcTest(ObjectProfileController.class)
public class ObjectProfileControllerTest {

    // ... [Previous setup code]

    @Test
    public void whenGetRequestToTemplateDetails_thenCorrectResponse() throws Exception {
        // Setup
        List<TemplateProfileDto> mockResponse = new ArrayList<>();
        mockResponse.add(new TemplateProfileDto()); // assuming constructor sets up a valid DTO
        when(mockTemplateProfileService.getTemplatesByNameAndVersion(anyString(), anyInt())).thenReturn(mockResponse);

        // Perform
        mockMvc.perform(get("/template-details/template-name/{templateName}/template-version/{templateVersion}", "ValidName", 1))
                .andExpect(status().isOk());

        // Verify
        verify(mockTemplateProfileService, times(1)).getTemplatesByNameAndVersion(anyString(), anyInt());
    }

    @Test
    public void whenTemplateNameNotFound_thenRespondNotFound() throws Exception {
        // Assume service returns empty list for not found template
        when(mockTemplateProfileService.getTemplatesByNameAndVersion(anyString(), anyInt())).thenReturn(new ArrayList<>());

        // Perform
        mockMvc.perform(get("/template-details/template-name/{templateName}/template-version/{templateVersion}", "InvalidName", 99))
                .andExpect(status().isNotFound());
    }

    @Test
    public void whenServiceThrowsException_thenRespondInternalServerError() throws Exception {
        // Setup
        when(mockTemplateProfileService.getTemplatesByNameAndVersion(anyString(), anyInt())).thenThrow(new RuntimeException("Internal Server Error"));

        // Perform and Assert
        mockMvc.perform(get("/template-details/template-name/{templateName}/template-version/{templateVersion}", "ValidName", 1))
                .andExpect(status().isInternalServerError());
    }

    // Additional test cases...
}
```

In these test cases:

- For the `TemplateProfileService`, I've included tests for expected success scenarios, a scenario where the template is not found, and a scenario where an exception is thrown.
- For the `ObjectProfileController`, there are tests for successful retrieval, not found scenarios, and error handling when an internal server error occurs.

When writing these tests, ensure that your actual service and controller logic is closely mimicked by the mock setups and assertions. Also, it might be necessary to adapt these examples slightly depending on the exact behavior of your classes and methods. Each test should ideally cover a single scenario or behavior. As your application evolves, continue to add tests for new features and modify existing tests as needed.