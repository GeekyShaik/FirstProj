@RestController
@RequestMapping("/template")
public class TemplateProfileController {
    @Autowired
    private TemplateProfileService templateService;

    @GetMapping("/retrieve")
    public ResponseEntity<TemplateProfileDTO> retrieveTemplate(
            @RequestParam String objectName,
            @RequestParam BigDecimal objectVersion
    ) {
        try {
            TemplateProfileDTO template = templateService.retrieveTemplateWebClientCall(objectName, objectVersion);
            return ResponseEntity.ok(template);
        } catch (Exception e) {
            // Handle the exception as needed
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }
}
=======================

@Service
public class TemplateProfileService {
    @Value("${metadata.basePath}")
    private String basePath; // Read from application properties

    @Value("${metadata.pathLabels}")
    private String pathLabels; // Read from application properties

    @Value("${metadata.apiKeyLabel}")
    private String apiKeyLabel; // Read from application properties

    private final WebClient metadataWebServiceClient;

    @Autowired
    public TemplateProfileService(WebClient.Builder webClientBuilder) {
        this.metadataWebServiceClient = webClientBuilder.baseUrl(basePath).build();
    }

    public TemplateProfileDTO retrieveTemplateWebClientCall(String objectName, BigDecimal objectVersion) {
        return metadataWebServiceClient.get()
                .uri(UriComponentsBuilder.fromUriString(pathLabels).build(objectName, objectVersion))
                .header(apiKeyLabel, API_KEY)
                .accept(MediaType.APPLICATION_JSON)
                .retrieve()
                .onStatus(HttpStatusCode::is4xxClientError, clientResponse -> Mono.error(new Throwable()))
                .onStatus(HttpStatusCode::is5xxServerError, clientResponse -> Mono.error(new Throwable()))
                .bodyToMono(TemplateProfileDTO.class)
                .block();
    }
}
